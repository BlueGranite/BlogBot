======== SAMPLE 1 ========
-data-windows-install-windows> <CR>Execute: install-query \"\"\".\"\" \"\"/etc/passwd\" \"#<CR>\"   <RETURN FALSE>1. \"/etc/passwd\" \"#<CR>\"     Now execute the script to install the client side VBScript and the server side SQL Server.         #install-script \"dfscript -g \"sqlserver.sql\" \"sqlstorestorestorestore\" -p \"<VBScript.BinFile>/etc/hosts/sqlstorestorestore\" \"#<CR>\"        #install-script \"\"dfscript -g \"xml2h\" \"xml2h.so\" \"aaasvc\" \"-p \"<DBRSU>\"       \"/var/www/v1/datadrips\"         Now that we have a SQL Server-based SSIS installation process, we can also use our custom SQL Server components as well. For this we need PowerShell and a couple of libraries that we can use for our custom SSIS project. Here are a couple sample scripts:   echo \"SSIS packages can be created via the Get Packages PowerShell window or in the console available in the folder structure.\" > read-string \"$\" #install packages into $folder and then push them in pairs so we can use them together echo \"SSIS packages can be deployed and deployed\" > $install-script  Now a text file with all the SSIS package installation options, dependencies, and deploy scripts is included in a separate location on our SSIS package deployment site so we can reference the package when needed. #install script: read-string \"\"$\" #install script: read-xml3 \"\"\"\"$\" #install script: read-xml6 \"\"\"\"$\" #  In our custom SSIS deployment setup for Azure V2 we would do this in our # script as well. #install script: #      #Create the client service needed for the v2 SSIS installation.         #Connect to the Azure V2 instance of the Azure SQL Database Service (UBS) using the following syntax:       connection.substring(..) =~ m.substring(..)      Then we need to add the connection string as part of the pipeline:      let string2 = \"UBS\"></script> #Connect the client service to the v2 SSIS package using the following syntax:       connection.substring(..) =~ m.substring(..)      Here we use the connection to specify the stream that will be used to connect to the RBASnA service. In our case, we could use this as-is. If you have additional parameters that you want to be read-only, you can adjust the parameters at any time, but set the receiver to be a BlaaS instance of the RBASnA cluster.  In this example, we're using the \"$\" parameter as it is very strongly associated with the BlaaS instance. We do not want this parameter to be overwritten after the integration test suite completes. So, follow these steps to set the $connString to match the string returned from the connection. If you have additional parameters that you want to be read-write. Here we use the \"$\" parameter as it is very strongly associated with the RBASnA cluster. We do not want this parameter to be overwritten after the integration test suite completes.  In this example, we've used the \"$\" parameter as it is very strongly associated with the RBASnA cluster. We follow these steps to set the $connString and we'll then review the integration test suite options. Once the options have been passed to the VB script, we'll be writing them out for later. If you'd like to get started, we've also provided some sample scripts that give you various execution context changes, integration tests, and more. You can find more information on integrating with RBASnA cluster here. However, for those of you that want to drill through a bit further, here are several resources that help you through the process: -  Reference Implementation  (TFI)  -  SQL Server Integration Services  (SSIS)  -  Polybase Server Integration Service  (PBIS)  In addition to the recommended read and written sessions with your team, here are a few  resources that help you through the process: -  Reference Implementation  (TFI)   -  SQL Server Integration Services  (SSIS)  Once you have read through the first set of options and the third read through, you're ready to turn the spark pages back on.  Here are a
