======== SAMPLE 1 ========
 slicular and slicational. The R package is the source of this language’s strengths, but it is also the source of its limitations. This is one reason that R is best suited for use in an enterprise environment. The data scientist or developer still needs a grasp of R, but a wealth of resources often await their advent and entry into the ‘R programming language’. For the data scientist or developer most commonly available language to open the package is  English. This is true for most languages, but many are already embedded in other languages, such as ‘T:\—‘’. For a user who already has the language knowledge or know-how to apply to the ‘R”, the list of languages that R supports is long. As a result, some common languages are: CSV - this is supported in R in version 1.3, but is not supported for the slicular interface in version 2.  R Basics  Unlike Python and Java, which use file system languages like C, R, and Java, R supports the use of file formats like text, binary, and JSON. Common file formats that R supports include: CSV - there are many file types that can be supported, though you will likely still need to use a different encoding for some formats. Also, unlike Python and Java, there is not an interface to read and write to these file types. JSON - in version 1.3, support for JSON file types like hexadecimal, case sensitive numbers, and more. Microsoft calls them ‘RDFs’. Unlike Python and Java, R supports data types like hexadecimal, case sensitive numbers, and more. In addition, R packages often come with functionality that enables a slicular component to be used within an R slicer. For example, in a slicular role, this can allow a slicular component to be used to read and write to standard JSON data types. R Compute - the slicular interface allows file system languages like Python and R to be used in conjunction with a built-in language (Python’s Runtime, of course). For instance, R itself allows file systems such as MS SQL to be used alongside Microsoft R. R-SQL is another language that allows for slicular roles. RScripts are used in the executable portion, but the slicular component does not interact with them. R Editor - a product feature introduced with version 1.3, R allows users to create their own executable within the R package. In addition, RScripts in R can be used to interact with imported data. RStudio’s Scott Fennessy also mentioned R Editor in his video below describing the R slicular Interface.  R Services   For users using the R-SQL or R-SQL+lite package, the SAS APIs (as well as the SAS Gen2 APIs) would work well. Additionally, users of Excel or SQL Server Data Tools would be well-served to modify their slicular implementation just to utilize R-SQL or R-SQL. SAS has long supported the use of the HLS (Hyper-aligned Layer) built into the SAS engine. Microsoft recently updated that to R-SQL, and the benefits are truly world-class.   Finally, R Studio would be helpful to read and understand the R SDKs. Microsoft has released a new set of SDKs for R that support the following SDK types – S3/S6: SAS Gen1, Gen2 (shared) & R Services (shared).  For those of you who already hold Microsoft’s 2005 Vision of a Software Platform in high regard, this was another example of the company’s recent selection of R toward the vision of a software platform.  R Service   For those with an Office 365 subscription, R-SQL would also work on an Office 365 subscription. This would also be another great option if your Office 365 tenant is in one of the Office 365-resisted or empty. Plus, the price of this subscription would be well-deserved as the ability to publish files would be expensive.  R-Data   For the sake of completeness, we will leave you with the R-SQL SDKs. These are the only R-SQL SDKs available available from Microsoft. Additionally, R-SQL (and R) is considered a cross-platform language because it can work with virtually any programming language. Although such high-level language choices might not be ideal from a business perspective, they do allow for a deeper understanding of R. R-SQL is also quite versatile and can potentially be used in a variety of applications.    R Services   SAS provides a suite of APIs for R. Here are the primary components to an R-SQL application: SELECT * FROM TSQL  and an R-SQL Query: SELECT POSSUM DATA FROM CONCAT AS ( SELECT POSSUM_CONCATIDATE, SELECT DISTINCT VARCHAR(max), SELECT VARCHAR
